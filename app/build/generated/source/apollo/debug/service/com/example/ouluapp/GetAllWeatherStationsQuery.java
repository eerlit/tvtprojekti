// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.ouluapp;

import com.apollographql.apollo.api.Operation;
import com.apollographql.apollo.api.OperationName;
import com.apollographql.apollo.api.Query;
import com.apollographql.apollo.api.Response;
import com.apollographql.apollo.api.ResponseField;
import com.apollographql.apollo.api.ScalarTypeAdapters;
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer;
import com.apollographql.apollo.api.internal.QueryDocumentMinifier;
import com.apollographql.apollo.api.internal.ResponseFieldMapper;
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller;
import com.apollographql.apollo.api.internal.ResponseReader;
import com.apollographql.apollo.api.internal.ResponseWriter;
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser;
import com.apollographql.apollo.api.internal.Utils;
import com.example.ouluapp.type.CustomType;
import java.io.IOException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Collections;
import java.util.List;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class GetAllWeatherStationsQuery implements Query<GetAllWeatherStationsQuery.Data, GetAllWeatherStationsQuery.Data, Operation.Variables> {
  public static final String OPERATION_ID = "c6735117699ef138296ee81d2aa2224cc031c637be45a94881f1da422fa30813";

  public static final String QUERY_DOCUMENT = QueryDocumentMinifier.minify(
    "query GetAllWeatherStations {\n"
        + "  weatherStations {\n"
        + "    __typename\n"
        + "    weatherStationId\n"
        + "    name\n"
        + "    lat\n"
        + "    lon\n"
        + "    collectionStatus\n"
        + "    measuredTime\n"
        + "    sensorValues {\n"
        + "      __typename\n"
        + "      roadStationId\n"
        + "      name\n"
        + "      sensorValue\n"
        + "      sensorUnit\n"
        + "    }\n"
        + "  }\n"
        + "}"
  );

  public static final OperationName OPERATION_NAME = new OperationName() {
    @Override
    public String name() {
      return "GetAllWeatherStations";
    }
  };

  private final Operation.Variables variables;

  public GetAllWeatherStationsQuery() {
    this.variables = Operation.EMPTY_VARIABLES;
  }

  @Override
  public String operationId() {
    return OPERATION_ID;
  }

  @Override
  public String queryDocument() {
    return QUERY_DOCUMENT;
  }

  @Override
  public GetAllWeatherStationsQuery.Data wrapData(GetAllWeatherStationsQuery.Data data) {
    return data;
  }

  @Override
  public Operation.Variables variables() {
    return variables;
  }

  @Override
  public ResponseFieldMapper<GetAllWeatherStationsQuery.Data> responseFieldMapper() {
    return new Data.Mapper();
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public OperationName name() {
    return OPERATION_NAME;
  }

  @Override
  @NotNull
  public Response<GetAllWeatherStationsQuery.Data> parse(@NotNull final BufferedSource source,
      @NotNull final ScalarTypeAdapters scalarTypeAdapters) throws IOException {
    return SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters);
  }

  @Override
  @NotNull
  public Response<GetAllWeatherStationsQuery.Data> parse(@NotNull final ByteString byteString,
      @NotNull final ScalarTypeAdapters scalarTypeAdapters) throws IOException {
    return parse(new Buffer().write(byteString), scalarTypeAdapters);
  }

  @Override
  @NotNull
  public Response<GetAllWeatherStationsQuery.Data> parse(@NotNull final BufferedSource source)
      throws IOException {
    return parse(source, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public Response<GetAllWeatherStationsQuery.Data> parse(@NotNull final ByteString byteString)
      throws IOException {
    return parse(byteString, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public ByteString composeRequestBody(@NotNull final ScalarTypeAdapters scalarTypeAdapters) {
    return OperationRequestBodyComposer.compose(this, false, true, scalarTypeAdapters);
  }

  @NotNull
  @Override
  public ByteString composeRequestBody() {
    return OperationRequestBodyComposer.compose(this, false, true, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public ByteString composeRequestBody(final boolean autoPersistQueries,
      final boolean withQueryDocument, @NotNull final ScalarTypeAdapters scalarTypeAdapters) {
    return OperationRequestBodyComposer.compose(this, autoPersistQueries, withQueryDocument, scalarTypeAdapters);
  }

  public static final class Builder {
    Builder() {
    }

    public GetAllWeatherStationsQuery build() {
      return new GetAllWeatherStationsQuery();
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  public static class Data implements Operation.Data {
    static final ResponseField[] $responseFields = {
      ResponseField.forList("weatherStations", "weatherStations", null, true, Collections.<ResponseField.Condition>emptyList())
    };

    final @Nullable List<WeatherStation> weatherStations;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public Data(@Nullable List<WeatherStation> weatherStations) {
      this.weatherStations = weatherStations;
    }

    /**
     * Get all weather stations
     */
    public @Nullable List<WeatherStation> weatherStations() {
      return this.weatherStations;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeList($responseFields[0], weatherStations, new ResponseWriter.ListWriter() {
            @Override
            public void write(List items, ResponseWriter.ListItemWriter listItemWriter) {
              for (Object item : items) {
                listItemWriter.writeObject(((WeatherStation) item).marshaller());
              }
            }
          });
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "weatherStations=" + weatherStations
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return ((this.weatherStations == null) ? (that.weatherStations == null) : this.weatherStations.equals(that.weatherStations));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= (weatherStations == null) ? 0 : weatherStations.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<Data> {
      final WeatherStation.Mapper weatherStationFieldMapper = new WeatherStation.Mapper();

      @Override
      public Data map(ResponseReader reader) {
        final List<WeatherStation> weatherStations = reader.readList($responseFields[0], new ResponseReader.ListReader<WeatherStation>() {
          @Override
          public WeatherStation read(ResponseReader.ListItemReader listItemReader) {
            return listItemReader.readObject(new ResponseReader.ObjectReader<WeatherStation>() {
              @Override
              public WeatherStation read(ResponseReader reader) {
                return weatherStationFieldMapper.map(reader);
              }
            });
          }
        });
        return new Data(weatherStations);
      }
    }
  }

  /**
   * Weather station type
   */
  public static class WeatherStation {
    static final ResponseField[] $responseFields = {
      ResponseField.forString("__typename", "__typename", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("weatherStationId", "weatherStationId", null, true, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("name", "name", null, true, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forDouble("lat", "lat", null, true, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forDouble("lon", "lon", null, true, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("collectionStatus", "collectionStatus", null, true, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forCustomType("measuredTime", "measuredTime", null, true, CustomType.GRAPHQLDATETIME, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forList("sensorValues", "sensorValues", null, true, Collections.<ResponseField.Condition>emptyList())
    };

    final @NotNull String __typename;

    final @Nullable String weatherStationId;

    final @Nullable String name;

    final @Nullable Double lat;

    final @Nullable Double lon;

    final @Nullable String collectionStatus;

    final @Nullable Object measuredTime;

    final @Nullable List<SensorValue> sensorValues;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public WeatherStation(@NotNull String __typename, @Nullable String weatherStationId,
        @Nullable String name, @Nullable Double lat, @Nullable Double lon,
        @Nullable String collectionStatus, @Nullable Object measuredTime,
        @Nullable List<SensorValue> sensorValues) {
      this.__typename = Utils.checkNotNull(__typename, "__typename == null");
      this.weatherStationId = weatherStationId;
      this.name = name;
      this.lat = lat;
      this.lon = lon;
      this.collectionStatus = collectionStatus;
      this.measuredTime = measuredTime;
      this.sensorValues = sensorValues;
    }

    public @NotNull String __typename() {
      return this.__typename;
    }

    /**
     * Weather station ID
     */
    public @Nullable String weatherStationId() {
      return this.weatherStationId;
    }

    /**
     * Weather station name
     */
    public @Nullable String name() {
      return this.name;
    }

    /**
     * Latitude of the car park (WGS 84)
     */
    public @Nullable Double lat() {
      return this.lat;
    }

    /**
     * Longitude of the car park (WGS 84)
     */
    public @Nullable Double lon() {
      return this.lon;
    }

    /**
     * Weather station collection status
     */
    public @Nullable String collectionStatus() {
      return this.collectionStatus;
    }

    /**
     * Weather sensor measured time in ISO-8601 format
     */
    public @Nullable Object measuredTime() {
      return this.measuredTime;
    }

    /**
     * Weather sensor values
     */
    public @Nullable List<SensorValue> sensorValues() {
      return this.sensorValues;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeString($responseFields[0], __typename);
          writer.writeString($responseFields[1], weatherStationId);
          writer.writeString($responseFields[2], name);
          writer.writeDouble($responseFields[3], lat);
          writer.writeDouble($responseFields[4], lon);
          writer.writeString($responseFields[5], collectionStatus);
          writer.writeCustom((ResponseField.CustomTypeField) $responseFields[6], measuredTime);
          writer.writeList($responseFields[7], sensorValues, new ResponseWriter.ListWriter() {
            @Override
            public void write(List items, ResponseWriter.ListItemWriter listItemWriter) {
              for (Object item : items) {
                listItemWriter.writeObject(((SensorValue) item).marshaller());
              }
            }
          });
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "WeatherStation{"
          + "__typename=" + __typename + ", "
          + "weatherStationId=" + weatherStationId + ", "
          + "name=" + name + ", "
          + "lat=" + lat + ", "
          + "lon=" + lon + ", "
          + "collectionStatus=" + collectionStatus + ", "
          + "measuredTime=" + measuredTime + ", "
          + "sensorValues=" + sensorValues
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof WeatherStation) {
        WeatherStation that = (WeatherStation) o;
        return this.__typename.equals(that.__typename)
         && ((this.weatherStationId == null) ? (that.weatherStationId == null) : this.weatherStationId.equals(that.weatherStationId))
         && ((this.name == null) ? (that.name == null) : this.name.equals(that.name))
         && ((this.lat == null) ? (that.lat == null) : this.lat.equals(that.lat))
         && ((this.lon == null) ? (that.lon == null) : this.lon.equals(that.lon))
         && ((this.collectionStatus == null) ? (that.collectionStatus == null) : this.collectionStatus.equals(that.collectionStatus))
         && ((this.measuredTime == null) ? (that.measuredTime == null) : this.measuredTime.equals(that.measuredTime))
         && ((this.sensorValues == null) ? (that.sensorValues == null) : this.sensorValues.equals(that.sensorValues));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= __typename.hashCode();
        h *= 1000003;
        h ^= (weatherStationId == null) ? 0 : weatherStationId.hashCode();
        h *= 1000003;
        h ^= (name == null) ? 0 : name.hashCode();
        h *= 1000003;
        h ^= (lat == null) ? 0 : lat.hashCode();
        h *= 1000003;
        h ^= (lon == null) ? 0 : lon.hashCode();
        h *= 1000003;
        h ^= (collectionStatus == null) ? 0 : collectionStatus.hashCode();
        h *= 1000003;
        h ^= (measuredTime == null) ? 0 : measuredTime.hashCode();
        h *= 1000003;
        h ^= (sensorValues == null) ? 0 : sensorValues.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<WeatherStation> {
      final SensorValue.Mapper sensorValueFieldMapper = new SensorValue.Mapper();

      @Override
      public WeatherStation map(ResponseReader reader) {
        final String __typename = reader.readString($responseFields[0]);
        final String weatherStationId = reader.readString($responseFields[1]);
        final String name = reader.readString($responseFields[2]);
        final Double lat = reader.readDouble($responseFields[3]);
        final Double lon = reader.readDouble($responseFields[4]);
        final String collectionStatus = reader.readString($responseFields[5]);
        final Object measuredTime = reader.readCustomType((ResponseField.CustomTypeField) $responseFields[6]);
        final List<SensorValue> sensorValues = reader.readList($responseFields[7], new ResponseReader.ListReader<SensorValue>() {
          @Override
          public SensorValue read(ResponseReader.ListItemReader listItemReader) {
            return listItemReader.readObject(new ResponseReader.ObjectReader<SensorValue>() {
              @Override
              public SensorValue read(ResponseReader reader) {
                return sensorValueFieldMapper.map(reader);
              }
            });
          }
        });
        return new WeatherStation(__typename, weatherStationId, name, lat, lon, collectionStatus, measuredTime, sensorValues);
      }
    }
  }

  /**
   * Weather sensor value
   */
  public static class SensorValue {
    static final ResponseField[] $responseFields = {
      ResponseField.forString("__typename", "__typename", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forInt("roadStationId", "roadStationId", null, true, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("name", "name", null, true, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forDouble("sensorValue", "sensorValue", null, true, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("sensorUnit", "sensorUnit", null, true, Collections.<ResponseField.Condition>emptyList())
    };

    final @NotNull String __typename;

    final @Nullable Integer roadStationId;

    final @Nullable String name;

    final @Nullable Double sensorValue;

    final @Nullable String sensorUnit;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public SensorValue(@NotNull String __typename, @Nullable Integer roadStationId,
        @Nullable String name, @Nullable Double sensorValue, @Nullable String sensorUnit) {
      this.__typename = Utils.checkNotNull(__typename, "__typename == null");
      this.roadStationId = roadStationId;
      this.name = name;
      this.sensorValue = sensorValue;
      this.sensorUnit = sensorUnit;
    }

    public @NotNull String __typename() {
      return this.__typename;
    }

    /**
     * Nearest road station ID
     */
    public @Nullable Integer roadStationId() {
      return this.roadStationId;
    }

    /**
     * Weather sensor name, e.g. SADE
     */
    public @Nullable String name() {
      return this.name;
    }

    /**
     * Weather sensor value, e.g. 0
     */
    public @Nullable Double sensorValue() {
      return this.sensorValue;
    }

    /**
     * Weather sensor unit
     */
    public @Nullable String sensorUnit() {
      return this.sensorUnit;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeString($responseFields[0], __typename);
          writer.writeInt($responseFields[1], roadStationId);
          writer.writeString($responseFields[2], name);
          writer.writeDouble($responseFields[3], sensorValue);
          writer.writeString($responseFields[4], sensorUnit);
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "SensorValue{"
          + "__typename=" + __typename + ", "
          + "roadStationId=" + roadStationId + ", "
          + "name=" + name + ", "
          + "sensorValue=" + sensorValue + ", "
          + "sensorUnit=" + sensorUnit
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof SensorValue) {
        SensorValue that = (SensorValue) o;
        return this.__typename.equals(that.__typename)
         && ((this.roadStationId == null) ? (that.roadStationId == null) : this.roadStationId.equals(that.roadStationId))
         && ((this.name == null) ? (that.name == null) : this.name.equals(that.name))
         && ((this.sensorValue == null) ? (that.sensorValue == null) : this.sensorValue.equals(that.sensorValue))
         && ((this.sensorUnit == null) ? (that.sensorUnit == null) : this.sensorUnit.equals(that.sensorUnit));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= __typename.hashCode();
        h *= 1000003;
        h ^= (roadStationId == null) ? 0 : roadStationId.hashCode();
        h *= 1000003;
        h ^= (name == null) ? 0 : name.hashCode();
        h *= 1000003;
        h ^= (sensorValue == null) ? 0 : sensorValue.hashCode();
        h *= 1000003;
        h ^= (sensorUnit == null) ? 0 : sensorUnit.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<SensorValue> {
      @Override
      public SensorValue map(ResponseReader reader) {
        final String __typename = reader.readString($responseFields[0]);
        final Integer roadStationId = reader.readInt($responseFields[1]);
        final String name = reader.readString($responseFields[2]);
        final Double sensorValue = reader.readDouble($responseFields[3]);
        final String sensorUnit = reader.readString($responseFields[4]);
        return new SensorValue(__typename, roadStationId, name, sensorValue, sensorUnit);
      }
    }
  }
}
