// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.ouluapp;

import com.apollographql.apollo.api.Operation;
import com.apollographql.apollo.api.OperationName;
import com.apollographql.apollo.api.Query;
import com.apollographql.apollo.api.Response;
import com.apollographql.apollo.api.ResponseField;
import com.apollographql.apollo.api.ScalarTypeAdapters;
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer;
import com.apollographql.apollo.api.internal.QueryDocumentMinifier;
import com.apollographql.apollo.api.internal.ResponseFieldMapper;
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller;
import com.apollographql.apollo.api.internal.ResponseReader;
import com.apollographql.apollo.api.internal.ResponseWriter;
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser;
import com.apollographql.apollo.api.internal.Utils;
import java.io.IOException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Collections;
import java.util.List;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class GetAllCarParksQuery implements Query<GetAllCarParksQuery.Data, GetAllCarParksQuery.Data, Operation.Variables> {
    public static final String OPERATION_ID = "90ce46f15e2f7e52e6ef129b5e152a80ca19cb0b0ae64da7fc76df6912f03833";

    public static final String QUERY_DOCUMENT = QueryDocumentMinifier.minify(
            "query GetAllCarParks {\n"
                    + "  carParks {\n"
                    + "    __typename\n"
                    + "    name\n"
                    + "    lat\n"
                    + "    lon\n"
                    + "    spacesAvailable\n"
                    + "  }\n"
                    + "}"
    );

    public static final OperationName OPERATION_NAME = new OperationName() {
        @Override
        public String name() {
            return "GetAllCarParks";
        }
    };

    private final Operation.Variables variables;

    public GetAllCarParksQuery() {
        this.variables = Operation.EMPTY_VARIABLES;
    }

    @Override
    public String operationId() {
        return OPERATION_ID;
    }

    @Override
    public String queryDocument() {
        return QUERY_DOCUMENT;
    }

    @Override
    public GetAllCarParksQuery.Data wrapData(GetAllCarParksQuery.Data data) {
        return data;
    }

    @Override
    public Operation.Variables variables() {
        return variables;
    }

    @Override
    public ResponseFieldMapper<GetAllCarParksQuery.Data> responseFieldMapper() {
        return new Data.Mapper();
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public OperationName name() {
        return OPERATION_NAME;
    }

    @Override
    @NotNull
    public Response<GetAllCarParksQuery.Data> parse(@NotNull final BufferedSource source,
                                                    @NotNull final ScalarTypeAdapters scalarTypeAdapters) throws IOException {
        return SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters);
    }

    @Override
    @NotNull
    public Response<GetAllCarParksQuery.Data> parse(@NotNull final ByteString byteString,
                                                    @NotNull final ScalarTypeAdapters scalarTypeAdapters) throws IOException {
        return parse(new Buffer().write(byteString), scalarTypeAdapters);
    }

    @Override
    @NotNull
    public Response<GetAllCarParksQuery.Data> parse(@NotNull final BufferedSource source) throws
            IOException {
        return parse(source, ScalarTypeAdapters.DEFAULT);
    }

    @Override
    @NotNull
    public Response<GetAllCarParksQuery.Data> parse(@NotNull final ByteString byteString) throws
            IOException {
        return parse(byteString, ScalarTypeAdapters.DEFAULT);
    }

    @Override
    @NotNull
    public ByteString composeRequestBody(@NotNull final ScalarTypeAdapters scalarTypeAdapters) {
        return OperationRequestBodyComposer.compose(this, false, true, scalarTypeAdapters);
    }

    @NotNull
    @Override
    public ByteString composeRequestBody() {
        return OperationRequestBodyComposer.compose(this, false, true, ScalarTypeAdapters.DEFAULT);
    }

    @Override
    @NotNull
    public ByteString composeRequestBody(final boolean autoPersistQueries,
                                         final boolean withQueryDocument, @NotNull final ScalarTypeAdapters scalarTypeAdapters) {
        return OperationRequestBodyComposer.compose(this, autoPersistQueries, withQueryDocument, scalarTypeAdapters);
    }

    public static final class Builder {
        Builder() {
        }

        public GetAllCarParksQuery build() {
            return new GetAllCarParksQuery();
        }
    }

    /**
     * Data from the response after executing this GraphQL operation
     */
    public static class Data implements Operation.Data {
        static final ResponseField[] $responseFields = {
                ResponseField.forList("carParks", "carParks", null, true, Collections.<ResponseField.Condition>emptyList())
        };

        final @Nullable List<CarPark> carParks;

        private transient volatile String $toString;

        private transient volatile int $hashCode;

        private transient volatile boolean $hashCodeMemoized;

        public Data(@Nullable List<CarPark> carParks) {
            this.carParks = carParks;
        }

        /**
         * Get all car parks
         */
        public @Nullable List<CarPark> carParks() {
            return this.carParks;
        }

        @SuppressWarnings({"rawtypes", "unchecked"})
        public ResponseFieldMarshaller marshaller() {
            return new ResponseFieldMarshaller() {
                @Override
                public void marshal(ResponseWriter writer) {
                    writer.writeList($responseFields[0], carParks, new ResponseWriter.ListWriter() {
                        @Override
                        public void write(List items, ResponseWriter.ListItemWriter listItemWriter) {
                            for (Object item : items) {
                                listItemWriter.writeObject(((CarPark) item).marshaller());
                            }
                        }
                    });
                }
            };
        }

        @Override
        public String toString() {
            if ($toString == null) {
                $toString = "Data{"
                        + "carParks=" + carParks
                        + "}";
            }
            return $toString;
        }

        @Override
        public boolean equals(Object o) {
            if (o == this) {
                return true;
            }
            if (o instanceof Data) {
                Data that = (Data) o;
                return ((this.carParks == null) ? (that.carParks == null) : this.carParks.equals(that.carParks));
            }
            return false;
        }

        @Override
        public int hashCode() {
            if (!$hashCodeMemoized) {
                int h = 1;
                h *= 1000003;
                h ^= (carParks == null) ? 0 : carParks.hashCode();
                $hashCode = h;
                $hashCodeMemoized = true;
            }
            return $hashCode;
        }

        public static final class Mapper implements ResponseFieldMapper<Data> {
            final CarPark.Mapper carParkFieldMapper = new CarPark.Mapper();

            @Override
            public Data map(ResponseReader reader) {
                final List<CarPark> carParks = reader.readList($responseFields[0], new ResponseReader.ListReader<CarPark>() {
                    @Override
                    public CarPark read(ResponseReader.ListItemReader listItemReader) {
                        return listItemReader.readObject(new ResponseReader.ObjectReader<CarPark>() {
                            @Override
                            public CarPark read(ResponseReader reader) {
                                return carParkFieldMapper.map(reader);
                            }
                        });
                    }
                });
                return new Data(carParks);
            }
        }
    }

    public static class CarPark {
        static final ResponseField[] $responseFields = {
                ResponseField.forString("__typename", "__typename", null, false, Collections.<ResponseField.Condition>emptyList()),
                ResponseField.forString("name", "name", null, false, Collections.<ResponseField.Condition>emptyList()),
                ResponseField.forDouble("lat", "lat", null, true, Collections.<ResponseField.Condition>emptyList()),
                ResponseField.forDouble("lon", "lon", null, true, Collections.<ResponseField.Condition>emptyList()),
                ResponseField.forInt("spacesAvailable", "spacesAvailable", null, true, Collections.<ResponseField.Condition>emptyList())
        };

        final @NotNull String __typename;

        final @NotNull String name;

        final @Nullable Double lat;

        final @Nullable Double lon;

        final @Nullable Integer spacesAvailable;

        private transient volatile String $toString;

        private transient volatile int $hashCode;

        private transient volatile boolean $hashCodeMemoized;

        public CarPark(@NotNull String __typename, @NotNull String name, @Nullable Double lat,
                       @Nullable Double lon, @Nullable Integer spacesAvailable) {
            this.__typename = Utils.checkNotNull(__typename, "__typename == null");
            this.name = Utils.checkNotNull(name, "name == null");
            this.lat = lat;
            this.lon = lon;
            this.spacesAvailable = spacesAvailable;
        }

        public @NotNull String __typename() {
            return this.__typename;
        }

        /**
         * Name of the car park
         */
        public @NotNull String name() {
            return this.name;
        }

        /**
         * Latitude of the car park (WGS 84)
         */
        public @Nullable Double lat() {
            return this.lat;
        }

        /**
         * Longitude of the car park (WGS 84)
         */
        public @Nullable Double lon() {
            return this.lon;
        }

        /**
         * Number of currently available parking spaces at the car park
         */
        public @Nullable Integer spacesAvailable() {
            return this.spacesAvailable;
        }

        @SuppressWarnings({"rawtypes", "unchecked"})
        public ResponseFieldMarshaller marshaller() {
            return new ResponseFieldMarshaller() {
                @Override
                public void marshal(ResponseWriter writer) {
                    writer.writeString($responseFields[0], __typename);
                    writer.writeString($responseFields[1], name);
                    writer.writeDouble($responseFields[2], lat);
                    writer.writeDouble($responseFields[3], lon);
                    writer.writeInt($responseFields[4], spacesAvailable);
                }
            };
        }

        @Override
        public String toString() {
            if ($toString == null) {
                $toString = "CarPark{"
                        + "__typename=" + __typename + ", "
                        + "name=" + name + ", "
                        + "lat=" + lat + ", "
                        + "lon=" + lon + ", "
                        + "spacesAvailable=" + spacesAvailable
                        + "}";
            }
            return $toString;
        }

        @Override
        public boolean equals(Object o) {
            if (o == this) {
                return true;
            }
            if (o instanceof CarPark) {
                CarPark that = (CarPark) o;
                return this.__typename.equals(that.__typename)
                        && this.name.equals(that.name)
                        && ((this.lat == null) ? (that.lat == null) : this.lat.equals(that.lat))
                        && ((this.lon == null) ? (that.lon == null) : this.lon.equals(that.lon))
                        && ((this.spacesAvailable == null) ? (that.spacesAvailable == null) : this.spacesAvailable.equals(that.spacesAvailable));
            }
            return false;
        }

        @Override
        public int hashCode() {
            if (!$hashCodeMemoized) {
                int h = 1;
                h *= 1000003;
                h ^= __typename.hashCode();
                h *= 1000003;
                h ^= name.hashCode();
                h *= 1000003;
                h ^= (lat == null) ? 0 : lat.hashCode();
                h *= 1000003;
                h ^= (lon == null) ? 0 : lon.hashCode();
                h *= 1000003;
                h ^= (spacesAvailable == null) ? 0 : spacesAvailable.hashCode();
                $hashCode = h;
                $hashCodeMemoized = true;
            }
            return $hashCode;
        }

        public static final class Mapper implements ResponseFieldMapper<CarPark> {
            @Override
            public CarPark map(ResponseReader reader) {
                final String __typename = reader.readString($responseFields[0]);
                final String name = reader.readString($responseFields[1]);
                final Double lat = reader.readDouble($responseFields[2]);
                final Double lon = reader.readDouble($responseFields[3]);
                final Integer spacesAvailable = reader.readInt($responseFields[4]);
                return new CarPark(__typename, name, lat, lon, spacesAvailable);
            }
        }
    }
}